pipeline {
    agent any

    tools {
        nodejs 'nodejs'  // This should match the name you provided in the NodeJS plugin configuration
    }

    environment {
        EC2_USER = 'ubuntu'
        EC2_HOST = '18.223.209.120' // Use the actual EC2 host IP or domain
        APP_DIR = '/var/www/nodejs-jenkins-pipeline'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/kenneth-stack/nodejs-jenkins-pipeline.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Test') {
            steps {
                sh 'npm test'
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                        def remoteCommand = """
                            cd ${APP_DIR}
                            npm install --production
                            pm2 stop all || true
                            pm2 start app.js --name "node-app"
                        """
                        
                        // Write the SSH key to a temporary file
                        writeFile file: 'temp_ssh_key', text: readFile(SSH_KEY)
                        sh 'chmod 600 temp_ssh_key'
                        
                        // Copy files to EC2
                        sh "scp -i temp_ssh_key -o StrictHostKeyChecking=no -r * ${EC2_USER}@${EC2_HOST}:${APP_DIR}"
                        
                        // Connect to EC2 and deploy the application
                        sh "ssh -i temp_ssh_key -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} '${remoteCommand}'"
                        
                        // Remove the temporary SSH key file
                        sh 'rm -f temp_ssh_key'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}