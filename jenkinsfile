pipeline {
    agent any

    tools {
        nodejs 'nodejs'  // This should match the name you provided in the NodeJS plugin configuration
    }

    environment {
        EC2_USER = 'ubuntu'
        EC2_HOST = '18.117.165.2' // Use the actual EC2 host IP or domain
        APP_DIR = '/home/ubuntu/nodejs-jenkins-pipeline'
        APP_NAME = 'node-webapp'
        APP_PORT = '5000'  // Make sure this matches the port in your app.js
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/kenneth-stack/nodejs-jenkins-pipeline.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm ci'  // Using npm ci for more reliable installs
            }
        }

        stage('Test') {
            steps {
                sh 'npm test'
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                        // Write the SSH key to a temporary file
                        writeFile file: 'temp_ssh_key', text: readFile(SSH_KEY)
                        sh 'chmod 600 temp_ssh_key'
                        
                        // Install Node.js and PM2 on EC2 (if not already installed)
                        sh """
                            ssh -i temp_ssh_key -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} '
                                if ! command -v node &> /dev/null; then
                                    curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
                                    sudo apt-get install -y nodejs
                                fi
                                if ! command -v pm2 &> /dev/null; then
                                    sudo npm install -g pm2
                                fi
                            '
                        """

                        // Create the directory on EC2
                        sh "ssh -i temp_ssh_key -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} 'mkdir -p ${APP_DIR}'"
                        
                        // Copy files to EC2 using rsync with exclusions
                        sh """
                            rsync -avz -e "ssh -i temp_ssh_key -o StrictHostKeyChecking=no" \
                                --exclude 'node_modules' --exclude '.git' ./ ${EC2_USER}@${EC2_HOST}:${APP_DIR}/
                        """
                        
                        // Connect to EC2 and deploy the application
                        sh """
                            ssh -i temp_ssh_key -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} '
                                cd ${APP_DIR}
                                npm ci --production
                                pm2 describe ${APP_NAME} > /dev/null
                                if [ \$? -eq 0 ]; then
                                    pm2 reload ${APP_NAME}
                                else
                                    pm2 start app.js --name "${APP_NAME}" -- --port ${APP_PORT}
                                fi
                                pm2 save
                                
                                # Check if the app is running
                                if pm2 describe ${APP_NAME} | grep -q "online"; then
                                    echo "Application ${APP_NAME} is running."
                                else
                                    echo "Failed to start application ${APP_NAME}."
                                    exit 1
                                fi
                            '
                        """
                        
                        // Remove the temporary SSH key file
                        sh 'rm -f temp_ssh_key'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}

Version 8 of 8